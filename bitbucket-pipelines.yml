definitions:
  steps:
    - step: &init-deploy-dev
        name: Set Stage
        script:
          - echo "export STAGE=dev" >> stage-prefixes
          - echo "export ENV=development" >> stage-prefixes
          - echo "export API_HOST_URL=http://alb-ap-services-dev-1980141691.us-east-1.elb.amazonaws.com/" >> stage-prefixes
        artifacts:
          - stage-prefixes

    - step: &init-deploy-stg
        name: Set Stage
        script:
          - echo "export STAGE=stg" >> stage-prefixes
          - echo "export ENV=staging" >> stage-prefixes
          - echo "export API_HOST_URL=http://alb-ap-services-stg-1105785516.us-east-1.elb.amazonaws.com/" >> stage-prefixes
        artifacts:
          - stage-prefixes

    - step: &init-deploy-prod
        name: Set Stage
        script:
          - echo "export STAGE=prod" >> stage-prefixes
          - echo "export ENV=production" >> stage-prefixes
        artifacts:
          - stage-prefixes

    - step: &pre-deploy
        name: Pre-Deploy Configs
        image: atlassian/default-image:2
        script:
          - while read line; do $line; done < stage-prefixes

          - echo "export STAGE=${STAGE}" >> env-vars-file
          - echo "export ENV=${ENV}" >> env-vars-file
          - echo "export API_HOST_URL=${API_HOST_URL}" >> env-vars-file
          - echo "export FLASK_ENV=${ENV}" >> env-vars-file
          - echo "export FLASK_RUN_PORT=${PORT}" >> env-vars-file
          - echo "export FLASK_APP=src/app.py" >> env-vars-file
          - echo "export FLASK_DEBUG=True" >> env-vars-file

          - echo "export DYNAMODB_TABLE_NAME_USERS=$(echo ${DYNO_TBL_USERS_TEMPLATE} | envsubst)" >> env-vars-file
          - echo "export DYNAMODB_TABLE_NAME_BLACKLIST=$(echo ${DYNO_TBL_BLACKLIST_TEMPLATE} | envsubst)" >> env-vars-file

          - export DOCKER_IMAGE_NAME=$(echo ${ECR_REPOSITORY_TEMPLATE} | envsubst)
          - export DOCKER_IMAGE_URI=${ECR_URI}/${DOCKER_IMAGE_NAME}

          - echo "export DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}" >> env-vars-file
          - echo "export DOCKER_IMAGE_URI=${DOCKER_IMAGE_URI}" >> env-vars-file
          - echo "export CLUSTER_NAME=$(echo ${CLUSTER_NAME_TEMPLATE} | envsubst)" >> env-vars-file
          - echo "export SERVICE_NAME=$(echo ${SERVICE_NAME_TEMPLATE} | envsubst)" >> env-vars-file

          - while read line; do $line; done < env-vars-file
          - export APP_ENV_VARS=$(echo ${APP_ENV_VARS} | envsubst)
          - echo ${TASK_DEFINITION_TEMPLATE} | envsubst > task-definition.json

          - if [[ $(curl -sL -w "%{http_code}\n" $SONAR_URL -o /dev/null -m 3) == 200 ]]; then echo 1 > continue_sonar; else echo 0 > continue_sonar ; fi
        artifacts:
          - env-vars-file
          - task-definition.json
          - continue_sonar

    - step: &build-lint-test
        name: Build -> Lint -> Test
        image: python:3.8.3
        caches:
          - pip
        script:
          - while read line; do $line; done < env-vars-file

          - export FLASK_ENV=testing
          - export DYNAMODB_TABLE_NAME_USERS=users
          - export DYNAMODB_TABLE_NAME_BLACKLIST=blacklist
          - SES_SOURCE_EMAIL=source@email.com
          - JWT_WEB_AUTH_TOKEN_EXPIRES_MINUTES=10
          - API_HOST_URL=http://localhost:5000

          - pip install pipenv
          - pipenv install --dev
          # Running Lint Analysis
          - pipenv run pre-commit install
          - pipenv run pre-commit run --all-files
          # Running Unit and Integration Tests
          - pipenv run pytest --cov-report xml --cov-report term-missing --junitxml=pytest.xml --cov=src tests -vvs

        artifacts:
          - coverage.xml
          - pytest.xml

    - step: &sonar-scan
        name: SonarScan
        image: naeemark/sonar-scanner:latest
        script:
          - if [[ 1 == $(cat continue_sonar) ]]; then bitbucket-sonar-scanner; else echo 'Skipped SonarScan'; fi

    - step: &build_push_docker_image
        name: Build, Push Docker Image
        services:
          - docker
        caches:
          - docker
        script:
          - while read line; do $line; done < env-vars-file
          - docker build -t ${DOCKER_IMAGE_NAME} .
          - docker inspect ${DOCKER_IMAGE_NAME}
          - pipe: atlassian/aws-ecr-push-image:1.1.3
            variables:
              IMAGE_NAME: ${DOCKER_IMAGE_NAME}
              TAGS: "build-${BITBUCKET_BUILD_NUMBER} ${BITBUCKET_TAG} $(date +%s) latest"

    - step: &deploy-dev
        name: Deploy -> Development
        image: atlassian/default-image:2
        deployment: Development
        script:
          - while read line; do $line; done < env-vars-file
          - pipe: atlassian/aws-ecs-deploy:1.1.4
            variables:
              CLUSTER_NAME: ${CLUSTER_NAME}
              SERVICE_NAME: ${SERVICE_NAME}
              TASK_DEFINITION: "task-definition.json"

    - step: &deploy-stg
        name: Deploy -> Staging
        image: atlassian/default-image:2
        deployment: Staging
        script:
          - while read line; do $line; done < env-vars-file
          - pipe: atlassian/aws-ecs-deploy:1.1.4
            variables:
              CLUSTER_NAME: ${CLUSTER_NAME}
              SERVICE_NAME: ${SERVICE_NAME}
              TASK_DEFINITION: "task-definition.json"

    - step: &deploy-prod
        name: Deploy -> Production
        trigger: manual
        deployment: Production
        script:
          - while read line; do $line; done < env-vars-file
          - pipe: atlassian/aws-ecs-deploy:1.1.4
            variables:
              CLUSTER_NAME: ${CLUSTER_NAME}
              SERVICE_NAME: ${SERVICE_NAME}
              TASK_DEFINITION: "task-definition.json"

pipelines:
  default:
    - step: *build-lint-test

  pull-requests:
    "**":
      - step: *build-lint-test

  branches:
    quick:
      - step: *init-deploy-dev
      - step: *pre-deploy
      - step: *build_push_docker_image
      - step: *deploy-dev
    develop:
      - step: *init-deploy-dev
      - step: *pre-deploy
      - step: *build-lint-test
      - step: *sonar-scan
      - step: *build_push_docker_image
      - step: *deploy-dev
    master:
      - step: *init-deploy-stg
      - step: *pre-deploy
      - step: *build-lint-test
      - step: *sonar-scan
      - step: *build_push_docker_image
      - step: *deploy-stg

  tags:
    v*:
      - step: *init-deploy-prod
      - step: *pre-deploy
      - step: *build-lint-test
      - step: *sonar-scan
      - step: *build_push_docker_image
      - step: *deploy-prod
