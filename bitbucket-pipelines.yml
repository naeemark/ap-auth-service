definitions:
  steps:
    - step: &build-lint-test
        name: Build -> Lint -> Test
        image: python:3.8.3
        caches:
          - pip
        script:
          - export FLASK_RUN_PORT=5000
          - export FLASK_ENV=development
          - export STAGE=dev
          - export ENV=testing
          - export FLASK_APP=src/app.py
          - export FLASK_DEBUG=True

          - export SQLALCHEMY_TRACK_MODIFICATIONS=False
          - export PROPAGATE_EXCEPTIONS=True

          - export DB_URL=postgresql://user:password@127.0.0.1:5432/my-db-please-update
          - export CLIENT_SECRET_KEY=this-is-client-secret-key
          - export JWT_SECRET_KEY=this-is-jwt-secret-key
          - export JWT_ACCESS_TOKEN_EXPIRES_MINUTES=30
          - export JWT_REFRESH_TOKEN_EXPIRES_DAYS=7

          - pip install pipenv

          - pipenv install --dev

          # Running Lint Analysis
          - pipenv run pre-commit install
          - pipenv run pre-commit run --all-files

          # Running Unit and Integration Tests
          - pipenv run pytest --cov-report xml --cov-report term-missing --junitxml=pytest.xml --cov=src tests -vvs

        artifacts:
          - coverage.xml
          - pytest.xml

    - step: &sonar-scan
        name: SonarScan
        image: naeemark/sonar-scanner:latest
        script:
          - if [[ 1 == $(cat continue_sonar) ]]; then bitbucket-sonar-scanner; else echo 'Skipped SonarScan'; fi

    - step: &init-deploy-dev
        name: Set Stage
        script:
          - echo dev > stage-prefix
        artifacts:
          - stage-prefix

    - step: &init-deploy-stg
        name: Set Stage
        script:
          - echo stg > stage-prefix
        artifacts:
          - stage-prefix

    - step: &init-deploy-prod
        name: Set Stage
        script:
          - echo prod > stage-prefix
        artifacts:
          - stage-prefix

    - step: &pre-deploy
        name: Pre-Deploy -> Dev
        image: atlassian/default-image:2
        script:
          - export STAGE=$(cat stage-prefix)
          - export DOCKER_IMAGE_NAME=$(echo ${ECR_REPOSITORY_TEMPLATE} | envsubst)
          - export DOCKER_IMAGE_URI=${ECR_URI}/${DOCKER_IMAGE_NAME}

          - echo ${DOCKER_IMAGE_NAME} > docker-image-name
          - echo ${DOCKER_IMAGE_URI} > docker-image-uri
          - echo ${CLUSTER_NAME_TEMPLATE} | envsubst > cluster-name
          - echo ${SERVICE_NAME_TEMPLATE} | envsubst > service-name
          - echo ${TASK_DEFINITION_TEMPLATE} | envsubst > task-definition.json
          - if [[ $(curl -sL -w "%{http_code}\n" $SONAR_URL -o /dev/null -m 3) == 200 ]]; then echo 1 > continue_sonar; else echo 0 > continue_sonar ; fi
        artifacts:
          - docker-image-name
          - cluster-name
          - service-name
          - task-definition.json
          - continue_sonar

    - step: &build_push_docker_image
        name: Build, Push Docker Image
        services:
          - docker
        caches:
          - docker
        script:
          - export FLASK_RUN_PORT=5000
          - export FLASK_ENV=development
          - export STAGE=dev
          - export FLASK_APP=src/app.py
          - export FLASK_DEBUG=True
          - export DEVELOPMENT=True

          - export SQLALCHEMY_TRACK_MODIFICATIONS=False
          - export SQLALCHEMY_TRACK_MODIFICATIONS=False
          - export PROPAGATE_EXCEPTIONS=True

          - export DB_URL=${DB_URL_DEV}
          - export CLIENT_SECRET_KEY=this-is-client-secret-key
          - export JWT_SECRET_KEY=this-is-jwt-secret-key
          - export JWT_ERROR_MESSAGE_KEY=message
          - export JWT_ACCESS_TOKEN_EXPIRES_MINUTES=30
          - export JWT_REFRESH_TOKEN_EXPIRES_DAYS=7

          - export DOCKER_IMAGE_NAME=$(cat docker-image-name)

          - env

          - docker build -t ${DOCKER_IMAGE_NAME} .
          - docker inspect ${DOCKER_IMAGE_NAME}

          - pipe: atlassian/aws-ecr-push-image:1.1.2
            variables:
              IMAGE_NAME: ${DOCKER_IMAGE_NAME}
              TAGS: "build-${BITBUCKET_BUILD_NUMBER} ${BITBUCKET_TAG} $(date +%s) latest"
        artifacts:
          - cluster-name
          - service-name
          - task-definition.json

    - step: &deploy-dev
        name: Deploy -> dev
        image: atlassian/default-image:2
        deployment: Development
        script:
          - pipe: atlassian/aws-ecs-deploy:1.1.3
            variables:
              CLUSTER_NAME: $(cat cluster-name)
              SERVICE_NAME: $(cat service-name)
              TASK_DEFINITION: "task-definition.json"

    - step: &deploy-stg
        name: Deploy -> stg
        deployment: Staging
        script:
          - echo 'This will deploy to stg'

    - step: &deploy-prod
        name: Deploy -> prod
        trigger: manual
        deployment: Production
        script:
          - echo 'This will deploy to prod'

pipelines:
  default:
    - step: *build-lint-test
    - step: *sonar-scan

  pull-requests:
    "**":
      - step: *build-lint-test

  branches:
    cicd:
      - step: *init-deploy-dev
      - step: *pre-deploy
      # - step: *sonar-scan
      - step: *build_push_docker_image
      - step: *deploy-dev
    develop:
      - step: *build-lint-test
      - step: *sonar-scan
      - step: *deploy-dev
    master:
      - step: *build-lint-test
      - step: *sonar-scan
      - step: *deploy-stg

  tags:
    v*:
      - step: *build-lint-test
      - step: *sonar-scan
      - step: *deploy-prod
