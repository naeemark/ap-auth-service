import os
import datetime
from dotenv import load_dotenv


BASEDIR = os.path.abspath(os.path.dirname(__file__))
PROJECT_ROOT = os.path.abspath(os.path.join(BASEDIR, os.pardir))
load_dotenv(os.path.join(PROJECT_ROOT, ".env"))

ENV = 'testing'

# Update later by using a random number generator and moving
# the actual key outside of the source code under version control
CLIENT_SECRET_KEY = os.environ['CLIENT_SECRET_KEY']
JWT_SECRET_KEY = os.environ['JWT_SECRET_KEY']
DEBUG = True

# JWT Tokens life-span config
JWT_ACCESS_TOKEN_EXPIRES = datetime.timedelta(minutes=int(os.environ["JWT_ACCESS_TOKEN_EXPIRES_MINUTES"]))
JWT_REFRESH_TOKEN_EXPIRES = datetime.timedelta(days=int(os.environ["JWT_REFRESH_TOKEN_EXPIRES_DAYS"]))

# SQLAlchemy
SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(PROJECT_ROOT, 'ap-auth-service-dev_test.db')
SQLALCHEMY_TRACK_MODIFICATIONS = False

# Bcrypt algorithm hashing rounds (reduced for testing purposes only!)
BCRYPT_LOG_ROUNDS = 4

# Enable the TESTING flag to disable the error catching during request handling
# so that you get better error reports when performing test requests against the application.
TESTING = True

# Disable CSRF tokens in the Forms (only valid for testing purposes!)
WTF_CSRF_ENABLED = False



#Blacklist settings
JWT_BLACKLIST_ENABLED = True
JWT_BLACKLIST_TOKEN_CHECKS =  ['access', 'refresh']

#JWT-extended
JWT_ERROR_MESSAGE_KEY = 'message'
JWT_HEADER_TYPE = ''
