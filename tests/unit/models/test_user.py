"""
    A file to containe all unit tests of
    UserModel
"""
import json

import pytest
from src.models.user import UserModel


CONTENT_TYPE_KEY = "Content-Type"
CONTENT_TYPE_VALUE = "application/json"
PASSWORD = "123!!@@AB"



@pytest.fixture(scope="module")
def new_user():
    """
        Creates and return new User
    """
    user = UserModel("abc123@gmail.com", "FlaskIsAwesome")
    return user


def test_new_user(new_user):
    """
        Validates newly created User
    """
    # pylint: disable=redefined-outer-name
    assert new_user is not None
    assert new_user.email == "abc123@gmail.com"
    assert new_user.password == "FlaskIsAwesome"


def test_register_user_without_token(api_prefix, test_client, test_database):
    """
    Test case to check user register without authentication token
    """

    response_register_user = test_client.post(
        f"{api_prefix}/user/register",
        data=json.dumps({"email": "john12@gmail.com", "password": "123!!@@AB"}),
    )
    assert response_register_user.status_code == 401
    assert len(test_database.metadata.sorted_tables[0].columns) == 3


def test_register_precondition_password(api_prefix, test_client, test_database):
    """
    Test case to check preconditions applied on password on user register
    """

    response_start_session = test_client.post(
        f"{api_prefix}/auth/StartSession",
        headers={
            "Client-App-Token": "0b0069c752ec14172c5f78208f1863d7ad6755a6fae6fe76ec2c80d13be41e42",
            "Timestamp": "131231",
            "Device-ID": "1321a31x121za",
        },
    )
    access_token_session = json.loads(response_start_session.data)["access_token"]

    response_register_user = test_client.post(
        f"{api_prefix}/user/register",
        headers={
            "Authorization": f"Bearer {access_token_session}",
            "Content-Type": "application/json",
        },
        data=json.dumps({"email": "john12@gmail.com", "password": "12378"}),
    )
    assert response_register_user.status_code == 412
    assert len(test_database.metadata.sorted_tables[0].columns) == 3


def test_start_session_generated_tokens(api_prefix, test_client, test_database):
    """
    Test case to check tokens generated by startSession
    """

    response_start_session = test_client.post(
        f"{api_prefix}/auth/StartSession",
        headers={
            "Client-App-Token": "0b0069c752ec14172c5f78208f1863d7ad6755a6fae6fe76ec2c80d13be41e42",
            "Timestamp": "131231",
            "Device-ID": "1321a31x121za",
        },
    )
    assert response_start_session.status_code == 200
    assert (
            "access_token"
            and "refresh_token" in json.loads(response_start_session.data).keys()
    )
    assert len(test_database.metadata.sorted_tables[0].columns) == 3


def test_user_logout_with_access_token(api_prefix, test_client, test_database):
    """
    Test case to logout with access token
    """
    response_start_session = test_client.post(
        f"{api_prefix}/auth/StartSession",
        headers={
            "Client-App-Token": "0b0069c852fc14172c5f78208f1863d7ad6755a6fae6fe86ec2c80d13be41e42",
            "Timestamp": "131231",
            "Device-ID": "1321a31x121za",
        },
        follow_redirects=True,
    )
    access_token_session = json.loads(response_start_session.data)["access_token"]

    response_register_user = test_client.post(
        f"{api_prefix}/user/register",
        headers={
            "Authorization": f"Bearer {access_token_session}",
            CONTENT_TYPE_KEY: CONTENT_TYPE_VALUE,
        },
        data=json.dumps({"email": "john16@gmail.com", "password": PASSWORD}),
        follow_redirects=True,
    )

    access_token_register = json.loads(response_register_user.data)["access_token"]

    response_logout = test_client.post(
        f"{api_prefix}/user/logout",
        headers={
            "Authorization": f"Bearer {access_token_register}",
            CONTENT_TYPE_KEY: CONTENT_TYPE_VALUE
        }
    )
    assert response_logout.status_code == 401
    assert json.loads(response_logout.data)['message'] == 'Fresh token required'

